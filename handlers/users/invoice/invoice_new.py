from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import Message
from aiogram.types import ReplyKeyboardRemove
from loguru import logger

from keyboards.default.invoice import new_invoice_markup
from keyboards.inline.invoice import invoice_share_keyboard
from loader import dp, rid
from middlewares import i18n
from services.invoice.create import create_invoice
from services.invoice.info import invoice_info
from states.invoice import NewInvoiceStates
from utils.exceptions import UserNotFoundException
from utils.templates import t

_ = i18n.gettext


@dp.message_handler(Command("cancel"), state="*")
async def cancel(message: Message, state: FSMContext):
    logger.debug("User#{} cleared his FSM state(/cancel)", message.from_user.id)
    await state.finish()
    await message.answer(_("–û—Ç–º–µ–Ω–µ–Ω–æ"), reply_markup=ReplyKeyboardRemove())


@dp.message_handler(Command("new_invoice"))
async def new_invoice(message: Message):
    logger.debug("User#{} initiated new invoice wizard", message.from_user.id)
    await NewInvoiceStates.first()
    await message.answer(
        text=_("–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å.\n"
               "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –æ—Ç–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏?\n"
               "(/cancel - –æ—Ç–º–µ–Ω–∞)"),
        reply_markup=new_invoice_markup()
    )


@dp.message_handler(state=NewInvoiceStates.enter_receiver)
async def enter_receiver(message: Message, state: FSMContext):
    if message.text == _("üëõ–ü–æ–ª—É—á–∏—Ç—å"):
        await state.update_data(money_from_creator=False)
        text = _("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å")
    elif message.text == _("üí∏–û—Ç–¥–∞—Ç—å"):
        await state.update_data(money_from_creator=True)
        text = _("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å")
    else:
        logger.debug("User#{} chose invalid option in 'enter receiver' dialog",
                     message.from_user.id)
        text = _("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞(/cancel)")
    await message.answer(text=text, reply_markup=ReplyKeyboardRemove())
    await NewInvoiceStates.next()


@dp.message_handler(state=NewInvoiceStates.enter_sum)
async def enter_sum(message: Message, state: FSMContext):
    if len(message.text) <= 12:
        await state.update_data(sum=message.text)
        await NewInvoiceStates.next()
        text = _("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n(/skip - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")
    else:
        logger.debug("User#{} entered invalid invoice sum", message.from_user.id)
        text = _("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ"
                 " —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞(/cancel)")

    await message.answer(text=text)


@dp.message_handler(state=NewInvoiceStates.enter_description)
async def enter_description(message: Message, state: FSMContext):
    if len(message.text) <= 64:
        if message.text == "/skip":
            message.text = ""

        state_data = await state.get_data()
        try:
            contract = create_invoice(telegram_user_id=message.from_user.id,
                                      description=message.text,
                                      money_from_creator=state_data["money_from_creator"],
                                      amount=state_data["sum"]
                                      )
        except UserNotFoundException:
            await message.answer(_("–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start "
                                   "–ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏"))
            return
        finally:
            await state.finish()

        invoice_data, contract = await invoice_info(contract.id, parties_info=True)

        await message.answer(text=_(t["invoice_info"]).format(**invoice_data),
                             reply_markup=invoice_share_keyboard(rid[contract.id]))

    else:
        await message.answer(_("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞(/cancel)"))
